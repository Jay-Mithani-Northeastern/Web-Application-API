
name: Run packer build on AWS

on:
  workflow_dispatch:
  push:
    branches:
     - 'main'

env:
  PRODUCT_VERSION: "1.8.6"

jobs:
  packer_build:
    runs-on: ubuntu-latest
    steps:
      - name: Github code checkout
        uses: actions/checkout@v1
      - name: Create a zip folder
        run: zip -r app.zip ./ -x *.git*
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: ${{ env.PRODUCT_VERSION }}

      - name: Run `packer init`
        id: init
        run: "packer init ami.pkr.hcl"
        working-directory: packer

      - name: Run `packer validate`
        id: validate
        run: "packer validate ami.pkr.hcl"
        working-directory: packer

      - name: Run `packer build`
        id: build
        run: "packer build -machine-readable -var-file=dev.auto.pkrvars.hcl ami.pkr.hcl | tee build.log"
        working-directory: packer

      - name: Parse AMI ID
        id: parse_ami_id
        working-directory: packer
        run: |
          CUSTOM_CMD="$(grep 'artifact,0,id' build.log | cut -d, -f6 | cut -d: -f2)"
          echo "ami_id=$CUSTOM_CMD" >> "$GITHUB_OUTPUT"
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Output AMI_ID
        run: |
          echo $AMI_ID
        env:
          AMI_ID: ${{ steps.parse_ami_id.outputs.ami_id }}

      - name: Create launch template version
        run: |
          aws ec2 create-launch-template-version --launch-template-name asg_launch_config --source-version 1 --launch-template-data '{"ImageId":"'"$AMI_ID"'"}'
        env:
          AMI_ID: ${{ steps.parse_ami_id.outputs.ami_id }}

      - name: Start instance refresh
        run: |
          aws autoscaling start-instance-refresh --auto-scaling-group-name webApp_ASG